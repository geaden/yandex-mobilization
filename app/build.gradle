apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        release {
            storeFile file("../yandex-mobilization.jks")
            storePassword System.getenv("JKS_PASS")
            keyAlias "artists"
            keyPassword System.getenv("ALIAS_PASS")
        }
    }

    defaultConfig {
        applicationId "com.geaden.android.mobilization.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.release
    }
    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def apkName = "${rootProject.ext.baseName}-${variant.buildType.name}-${defaultConfig.versionName}.apk"
        variant.outputs.each { output ->
            def file = output.outputFile
            output.outputFile = new File(file.parent, apkName)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // App's dependencies, including test
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:gridlayout-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.google.guava:guava:$rootProject.guavaVersion"
    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
    compile "com.jakewharton:butterknife:$rootProject.ext.butterknifeVersion"
    compile "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"

    provided 'javax.annotation:jsr250-api:1.0'

    compile "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okHttpVersion"

    compile "com.github.Raizlabs.DBFlow:dbflow-core:$rootProject.ext.dbflowVersion"
    compile "com.github.Raizlabs.DBFlow:dbflow:$rootProject.ext.dbflowVersion"

    // DI
    apt "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    apt "com.github.Raizlabs.DBFlow:dbflow-processor:$rootProject.ext.dbflowVersion"

    // Dependencies for local unit tests
    testCompile("junit:junit:$rootProject.ext.junitVersion") {
        exclude module: "org.hamcrest:hamcreset-core"
    }
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    androidTestApt 'com.google.dagger:dagger-compiler:2.0'

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.runnerVersion"

    androidTestCompile "com.squareup.okhttp3:mockwebserver:$rootProject.ext.okHttpVersion"

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
[configurations.compile, configurations.provided, configurations.apt].each { configuration ->
    configuration.dependencies.each { dependency ->
        println "Excluding ${configuration.name} dependency: ${dependency.getName()}"
        configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestCompile.exclude module: "${dependency.getName()}"
        }
    }
}

// Copy res directory from unit-tests
task copyResDirectoryToClasses << {
    // Copy for debug
    def resDir = "${projectDir}/src/test/res"
    def testDir = "${buildDir}/intermediates/classes/test"

    // Copy for debug
    copy {
        from resDir
        into "$testDir/debug"
    }

    // Copy for release
    copy {
        from resDir
        into "$testDir/release"
    }
}

project(':app').check.dependsOn copyResDirectoryToClasses
